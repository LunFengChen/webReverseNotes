import base64
import hashlib

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad


def aes_decrypt(cipher_bytes: bytes, aes_key: bytes) -> bytes:
    return unpad(AES.new(aes_key, AES.MODE_ECB).decrypt(cipher_bytes), AES.block_size)


s = hashlib.sha1("tSdGtmwh49BcR1irt18mxG41dGsBuGKS".encode())
key_hex = s.hexdigest()[:32]

cipher_text = "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"
cipher_bytes = base64.b64decode(cipher_text)
res = aes_decrypt(cipher_bytes=cipher_bytes, aes_key=bytes.fromhex(key_hex)).decode()
print(res)
